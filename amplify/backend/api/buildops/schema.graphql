type Address {
	id: ID!
	line1: String!
	line2: String!
	city: String!
	state: String!
	zipcode: String!
	employeeId: ID!
}

type AddressConnection {
	items: [Address]
	nextToken: String
}

input CreateAddressInput {
	line1: String!
	line2: String!
	city: String!
	state: String!
	zipcode: String!
	employeeId: ID!
}

input CreateEmployeeInput {
	firstname: String!
	lastname: String!
}

input CreateSkillInput {
	name: String!
	employeeId: ID!
}

input DeleteAddressInput {
	id: ID!
}

input DeleteEmployeeInput {
	id: ID!
}

input DeleteSkillInput {
	id: ID!
}

type Employee {
	id: ID!
	firstname: String!
	lastname: String!
	address: [Address]
	skills: [Skill]
}

type EmployeeConnection {
	items: [Employee]
	nextToken: String
}

type Mutation {
	createEmployee(input: CreateEmployeeInput!): Employee
	updateEmployee(input: UpdateEmployeeInput!): Employee
	deleteEmployee(input: DeleteEmployeeInput!): Employee
	createAddress(input: CreateAddressInput!): Address
	updateAddress(input: UpdateAddressInput!): Address
	deleteAddress(input: DeleteAddressInput!): Address
	createSkill(input: CreateSkillInput!): Skill
	updateSkill(input: UpdateSkillInput!): Skill
	deleteSkill(input: DeleteSkillInput!): Skill
}

type Query {
	getEmployee(id: ID!): Employee
	listEmployees(filter: TableEmployeeFilterInput, limit: Int, nextToken: String): EmployeeConnection
	getAddress(id: ID!): Address
	listAddresses(filter: TableAddressFilterInput, limit: Int, nextToken: String): AddressConnection
	queryAddressesByEmployeeIdIndex(employeeId: ID!, first: Int, after: String): AddressConnection
	getSkill(id: ID!): Skill
	listSkills(filter: TableSkillFilterInput, limit: Int, nextToken: String): SkillConnection
	querySkillsByEmployeeIdIndex(employeeId: ID!, first: Int, after: String): SkillConnection
}

type Skill {
	id: ID!
	name: String!
	employeeId: ID!
}

type SkillConnection {
	items: [Skill]
	nextToken: String
}

type Subscription {
	onCreateEmployee(id: ID, firstname: String, lastname: String): Employee
		@aws_subscribe(mutations: ["createEmployee"])
	onUpdateEmployee(id: ID, firstname: String, lastname: String): Employee
		@aws_subscribe(mutations: ["updateEmployee"])
	onDeleteEmployee(id: ID, firstname: String, lastname: String): Employee
		@aws_subscribe(mutations: ["deleteEmployee"])
	onCreateAddress(
		id: ID,
		line1: String,
		line2: String,
		city: String,
		state: String
	): Address
		@aws_subscribe(mutations: ["createAddress"])
	onUpdateAddress(
		id: ID,
		line1: String,
		line2: String,
		city: String,
		state: String
	): Address
		@aws_subscribe(mutations: ["updateAddress"])
	onDeleteAddress(
		id: ID,
		line1: String,
		line2: String,
		city: String,
		state: String
	): Address
		@aws_subscribe(mutations: ["deleteAddress"])
	onCreateSkill(id: ID, name: String, employeeId: ID): Skill
		@aws_subscribe(mutations: ["createSkill"])
	onUpdateSkill(id: ID, name: String, employeeId: ID): Skill
		@aws_subscribe(mutations: ["updateSkill"])
	onDeleteSkill(id: ID, name: String, employeeId: ID): Skill
		@aws_subscribe(mutations: ["deleteSkill"])
}

input TableAddressFilterInput {
	id: TableIDFilterInput
	line1: TableStringFilterInput
	line2: TableStringFilterInput
	city: TableStringFilterInput
	state: TableStringFilterInput
	zipcode: TableStringFilterInput
	employeeId: TableIDFilterInput
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableEmployeeFilterInput {
	id: TableIDFilterInput
	firstname: TableStringFilterInput
	lastname: TableStringFilterInput
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableSkillFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
	employeeId: TableIDFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateAddressInput {
	id: ID!
	line1: String
	line2: String
	city: String
	state: String
	zipcode: String
	employeeId: ID
}

input UpdateEmployeeInput {
	id: ID!
	firstname: String
	lastname: String
}

input UpdateSkillInput {
	id: ID!
	name: String
	employeeId: ID
}